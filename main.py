import os
import telebot
from telebot import types
from datetime import datetime, timedelta
import psycopg2
from dotenv import load_dotenv
import subprocess

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—É—Ç–∏
EASYRSA_PATH = "/root/openvpn-ca/"
CA_PATH = os.path.join(EASYRSA_PATH, "pki")
ISSUED_CERTS_PATH = os.path.join(CA_PATH, "issued")
PRIVATE_KEYS_PATH = os.path.join(CA_PATH, "private")
CONFIGS_DIR = "configs"
SERVER_IP = "YOUR_SERVER_IP"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(CONFIGS_DIR, exist_ok=True)


def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
    return psycopg2.connect(
        host=os.getenv("DB_HOST"),
        database=os.getenv("DB_NAME"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD")
    )


def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM admins WHERE telegram_id = %s", (user_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    return result is not None


def generate_certificates(username):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ easyrsa"""
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subprocess.run(
            [os.path.join(EASYRSA_PATH, "easyrsa"), "gen-req", username, "nopass"],
            cwd=EASYRSA_PATH,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        # –ü–æ–¥–ø–∏—Å—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        subprocess.run(
            [os.path.join(EASYRSA_PATH, "easyrsa"), "sign-req", "client", username],
            cwd=EASYRSA_PATH,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        return True
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e.stderr.decode()}")
        return False


def create_ovpn_config(username):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª OpenVPN"""
    try:
        # –ß—Ç–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ –∫–ª—é—á–µ–π
        with open(os.path.join(CA_PATH, "ca.crt"), "r") as f:
            ca_cert = f.read().strip()

        with open(os.path.join(ISSUED_CERTS_PATH, f"{username}.crt"), "r") as f:
            user_cert = f.read().strip()

        with open(os.path.join(PRIVATE_KEYS_PATH, f"{username}.key"), "r") as f:
            user_key = f.read().strip()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        config_content = f"""client
dev tun
proto udp
remote {SERVER_IP} 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA256
cipher AES-256-CBC
compress lz4
verb 3

<ca>
{ca_cert}
</ca>
<cert>
{user_cert}
</cert>
<key>
{user_key}
</key>
"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        config_path = os.path.join(CONFIGS_DIR, f"{username}.ovpn")
        with open(config_path, "w") as f:
            f.write(config_content)

        return config_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")
        return None


@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.add(btn_add)
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å VPN!", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def add_user_start(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è VPN:")
    bot.register_next_step_handler(msg, add_user_expiration)


def add_user_expiration(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    username = message.text.strip()
    if not username:
        bot.send_message(message.chat.id, "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM vpn_users WHERE username = %s", (username,))
    if cursor.fetchone():
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        cursor.close()
        conn.close()
        return
    cursor.close()
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_30 = types.KeyboardButton("30 –¥–Ω–µ–π")
    btn_forever = types.KeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞")
    markup.add(btn_30, btn_forever)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda m: add_user_final(m, username))


def add_user_final(message, username):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text not in ["30 –¥–Ω–µ–π", "–ù–∞–≤—Å–µ–≥–¥–∞"]:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ä–æ–∫–∞!")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    bot.send_message(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...")
    if not generate_certificates(username):
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤!")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
    bot.send_message(message.chat.id, "‚è≥ –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
    config_path = create_ovpn_config(username)
    if not config_path:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞!")
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    expiration_date = None
    if message.text == "30 –¥–Ω–µ–π":
        expiration_date = datetime.now() + timedelta(days=30)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO vpn_users (username, vpn_config, expiration_date) VALUES (%s, %s, %s)",
            (username, f"{username}.ovpn", expiration_date)
        )
        conn.commit()
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return
    finally:
        cursor.close()
        conn.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(config_path, "rb") as f:
        bot.send_document(
            message.chat.id,
            f,
            caption=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {message.text}"
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    os.remove(config_path)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()